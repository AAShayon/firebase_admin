import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../../domain/entities/promotion_entity.dart';
import '../providers/promotion_notifier_provider.dart';
import '../widgets/promotion_date_selector.dart';
import '../widgets/promotion_details_form.dart';
import '../widgets/promotion_discount_form.dart';
import '../widgets/promotion_rules_form.dart';
import '../widgets/promotion_scope_form.dart';

class CreatePromotionPage extends ConsumerStatefulWidget {
  final PromotionEntity? promotionToEdit;
  const CreatePromotionPage({super.key, this.promotionToEdit});

  @override
  ConsumerState<CreatePromotionPage> createState() => _CreatePromotionPageState();
}

class _CreatePromotionPageState extends ConsumerState<CreatePromotionPage> {
  final _formKey = GlobalKey<FormState>();
  // --- State variables for the entire form ---
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _discountValueController = TextEditingController();
  final _couponCodeController = TextEditingController();
  final _usageLimitController = TextEditingController();

  String? _imageUrl;
  DiscountType _discountType = DiscountType.percentage;
  DateTime _startDate = DateTime.now();
  DateTime _endDate = DateTime.now().add(const Duration(days: 7));
  PromotionScope _scope = PromotionScope.allProducts;
  List<String> _selectedProductIds = [];

  bool get isEditMode => widget.promotionToEdit != null;

  @override
  void initState() {
    super.initState();
    if (isEditMode) {
      final p = widget.promotionToEdit!;
      _titleController.text = p.title;
      _descriptionController.text = p.description;
      _imageUrl = p.imageUrl;
      _discountType = p.discountType;
      _discountValueController.text = p.discountValue.toString();
      _startDate = p.startDate;
      _endDate = p.endDate;
      _couponCodeController.text = p.couponCode ?? '';
      _usageLimitController.text = p.usageLimit?.toString() ?? '';
      _scope = p.scope;
      _selectedProductIds = List.from(p.productIds);
    }
  }

  @override
  void dispose() {
    // ... dispose all controllers
    _titleController.dispose();
    _descriptionController.dispose();
    _discountValueController.dispose();
    _couponCodeController.dispose();
    _usageLimitController.dispose();

    super.dispose();
  }

  void _submitForm() {
    if (!_formKey.currentState!.validate()) return;
    if (_imageUrl == null) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Please select a banner image.')));
      return;
    }
    if (_scope == PromotionScope.specificProducts && _selectedProductIds.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Please select at least one product for this promotion.')));
      return;
    }

    final newPromotion = PromotionEntity(
      id: isEditMode ? widget.promotionToEdit!.id : '', // ID will be generated by Firestore on create
      title: _titleController.text.trim(),
      description: _descriptionController.text.trim(),
      imageUrl: _imageUrl!,
      discountType: _discountType,
      discountValue: double.tryParse(_discountValueController.text) ?? 0,
      startDate: _startDate,
      endDate: _endDate,
      couponCode: _couponCodeController.text.trim().toUpperCase(),
      usageLimit: int.tryParse(_usageLimitController.text),
      scope: _scope,
      productIds: _selectedProductIds,
    );

    final notifier = ref.read(promotionNotifierProvider.notifier);
    if (isEditMode) {
      notifier.updatePromotion(newPromotion);
    } else {
      notifier.createPromotion(newPromotion);
    }
  }

  @override
  Widget build(BuildContext context) {
    ref.listen(promotionNotifierProvider, (_, state) {
      state.maybeWhen(
        success: (message) {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(message), backgroundColor: Colors.green));
          context.pop();
        },
        error: (message) => ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error: $message'), backgroundColor: Colors.red)),
        orElse: () {},
      );
    });

    final isLoading = ref.watch(promotionNotifierProvider).maybeWhen(loading: () => true, orElse: () => false);

    return Scaffold(
      appBar: AppBar(title: Text(isEditMode ? 'Edit Promotion' : 'Create Promotion')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              PromotionDetailsForm(
                titleController: _titleController,
                descriptionController: _descriptionController,
                selectedImageUrl: _imageUrl,
                onImageSelected: (url) => setState(() => _imageUrl = url),
              ),
              const SizedBox(height: 16),
              PromotionDiscountForm(
                discountType: _discountType,
                discountValueController: _discountValueController,
                onDiscountTypeChanged: (type) => setState(() => _discountType = type),
              ),
              const SizedBox(height: 16),
              PromotionDateSelector(
                startDate: _startDate,
                endDate: _endDate,
                onStartDateChanged: (date) => setState(() => _startDate = date),
                onEndDateChanged: (date) => setState(() => _endDate = date),
              ),
              const SizedBox(height: 16),
              PromotionScopeForm(
                scope: _scope,
                selectedProductIds: _selectedProductIds,
                onScopeChanged: (scope) => setState(() => _scope = scope),
                onProductsChanged: (ids) => setState(() => _selectedProductIds = ids),
              ),
              const SizedBox(height: 16),
              PromotionRulesForm(
                couponCodeController: _couponCodeController,
                usageLimitController: _usageLimitController,
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: FilledButton.icon(
                  icon: isLoading ? const SizedBox.shrink() : const Icon(Icons.save),
                  label: isLoading ? const CircularProgressIndicator(color: Colors.white) : const Text('Save Promotion'),
                  onPressed: isLoading ? null : _submitForm,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}